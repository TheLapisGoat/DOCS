			+-----------------------+
			|         CS60203       |
			| Assignment 2: THREADS |
			|     DESIGN DOCUMENT   |
			+-----------------------+
				   
---- GROUP ----
Sourodeep Datta sourodeepdatta@gmail.com

---- PRELIMINARIES ----
			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread {
    /* Existing members. */

    int64_t wakeup_time;
};
Stores the time at which the thread should be woken up in terms of ticks.

static struct list sleep_list;
List to store the threads which are sleeping.

---- ALGORITHMS ----
>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

A2: When a thread calls timer_sleep(), it adds itself to the sleep_list and blocks itself. It does this by disabling interrupts
and then calling thread_block(). As the interrupts are disabled, the timer interrupt handler cannot interrupt the thread while
it is adding itself to the sleep_list.

When the timer interrupt handler is called, it increments the ticks variable and checks if any thread in the sleep_list has to
be woken up. If the wakeup_time of the thread at the front of the sleep_list is less than the current ticks, the thread is removed
from the sleep_list and unblocked.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
A3: The timer interrupt handler does not do much work when there are no threads to wake up. It only increments the ticks variable
and checks the first thread in the sleep_list. If the wakeup_time is greater than the current ticks, it does not do anything and
returns. If the wakeup_time is less than / equal to the current ticks, it removes the thread from the sleep_list and unblocks it.
It then checks the next thread in the sleep_list and repeats the process. 

---- SYNCHRONIZATION ----
>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

A4: As mentioned in the PintOS documentation, "at any given time, exactly one thread runs and the rest, if any, become inactive".
Thus by disabling interrupts in the critical section (adding the thread to the sleep_list), it is ensured that no other thread can
be scheduled to run and call timer_sleep() simultaneously. This prevents race conditions. 

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

A5: When accessing the sleep_list in timer_sleep(), interrupts are disabled. This ensures that the timer interrupt handler cannot
run and modify the sleep_list while the thread is adding itself to the sleep_list. This prevents race conditions.

---- RATIONALE ----
>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

A6: The design is simple and efficient. It uses a single list to store the threads which are sleeping. The timer interrupt handler
only does work when there are threads to wake up. Plus it is better than a design using wakeup threads as it does not require
having an additional thread to wake up the sleeping threads, which adds extra overhead due to context switching while requiring
more memory.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?
It was fairly straightforward and took a reasonable amount of time.


>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
Yes, working on the timer_interrupt handler along with the logic to block threads gave me a better understanding of OS design

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?
No

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?
No

>> Any other comments?
No